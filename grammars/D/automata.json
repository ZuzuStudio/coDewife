[
	{
		"name": "GlobalD",
		"type": "parallel",
		"automata":
		[
			"IntegerLiteral",
			"NonEof"
		]
	},
	{
		"name": "IntegerLiteral",
		"type": "sequence",
		"automata": 
		[
			"Integer",
			"IntegerSuffix"
		]
	},
	{
		"name": "Integer",
		"type": "parallel",
		"automata":
		[
			"BinaryInteger",
			"DecimalInteger"
		]
	},
	{
		"name": "BinaryInteger",
		"type": "heatherAndTheather",
		"automata":
		[
			"ForwardBinaryInteger",
			"BackwardBinaryInteger"
		]
	},
	{
		"name": "ForwardBinaryInteger",
		"type": "sequence",
		"automata":
		[
			"BinaryPrefix",
			"PluralForwardBinaryLiteralGlyph"
		]
	},
	{
		"name": "BinaryPrefix",
		"type": "sequence",
		"automata":
		[
			"ZeroDigit",
			"Bb"
		]
	},
	{
		"name": "ZeroDigit",
		"type": "singleIdentity",
		"string": "0"
	},
	{
		"name": "Bb",
		"type": "parallel",
		"automata":
		[
			"BLetter",
			"bLetter"
		]
	},
	{
		"name": "BLetter",
		"type": "singleIdentity",
		"string": "B"
	},
	{
		"name": "bLetter",
		"type": "singleIdentity",
		"string": "b"
	},
	{
		"name": "PluralForwardBinaryLiteralGlyph",
		"type": "Kleene star",
		"automata":
		[
			"ForwardBinaryLiteralGlyph"
		]
	},
	{
		"name": "ForwardBinaryLiteralGlyph",
		"type": "parallel",
		"automata":
		[
			"ForwardBinaryDigit",
			"ForwardUnderscore"
		]
	},
	{
		"name": "ForwardBinaryDigit",
		"type": "general",
		"predicate":
		{
			"union": "and",
			"a":
			{
				"compare": ">=",
				"value": "0"
			},
			"b":
			{
				"compare": "<=",
				"value": "1"
			}
		},
		"mapping":
		[
			"empty"
		]
	},
	{
		"name": "ForwardUnderscore",
		"type": "general",
		"predicate":
		{
				"compare": "==",
				"value": "_"
		},
		"mapping":
		[
			"empty"
		]
	},
	{
		"name": "BackwardBinaryInteger",
		"type": "sequence",
		"direction": "backward",
		"automata":
		[
			"PluralXU",
			"BacwardBinaryDigit",
			"PluralBinaryPeriod",
			"RestBackwardBinaryInteger"
		]
	},
	{
		"name": "PluralXU",
		"type": "Kleene star",
		"direction": "backward",
		"automata":
		[
			"XU"
		]
	},
	{
		"name": "XU",
		"type": "general",
		"direction": "backward",
		"predicate":
		{
			"compare": "==",
			"value": "_"
		},
		"mapping":
		[
			"XU OT"
		]
	},
	{
		"name": "BacwardBinaryDigit",
		"type": "rangeIdentity",
		"direction": "backward",
		"from": "0",
		"to": "1"
	},
	{
		"name": "PluralBinaryPeriod",
		"type": "Kleene star",
		"direction": "backward",
		"automata":
		[
			"BinaryPeriod"
		]
	},
	{
		"name": "BinaryPeriod",
		"type": "sequence",
		"direction": "backward",
		"automata":
		[
			"3UU*B",
			"PotencialLU"
		]
	},
	{
		"name": "3UU*B",
		"type": "quantifier",
		"direction": "backward",
		"min": 3,
		"max": 3,
		"automata":
		[
			"UU*B"
		]
	},
	{
		"name": "UU*B",
		"type": "sequence",
		"direction": "backward",
		"automata": 
		[
			"PluralUU",
			"BackwardBinaryDigit"
		]
	},
	{
		"name": "PluralUU",
		"type": "Kleene star",
		"direction": "backward",
		"automata": 
		[
			"UU"
		]
	},
	{
		"name": "UU",
		"type": "general",
		"direction": "backward",
		"predicate":
		{
			"compare": "==",
			"value": "_"
		},
		"mapping":
		[
			"UU OT"
		]
	},
	{
		"name": "PotencialLU",
		"type": "parallel",
		"direction": "backward",
		"automata":
		[
			"CUUU*B",
			"BackwardLUBinaryDigit"
		]
	},
	{
		"name": "CUUU*B",
		"type": "sequence",
		"direction": "backward",
		"automata":
		[
			"CU",
			"PluralUU",
			"BackwardBinaryDigit"
		]
	},
	{
		"name": "CU",
		"type": "general",
		"direction": "backward",
		"predicate":
		{
			"compare": "==",
			"value": "_"
		},
		"mapping":
		[
			"CU OT"
		]
	},
	{
		"name": "BackwardLUBinaryDigit",
		"type": "general",
		"direction": "backward",
		"predicate":
		{
			"union": "and",
			"a":
			{
				"compare": ">=",
				"value": "0"
			},
			"b":
			{
				"compare": "<=",
				"value": "1"
			}
		},
		"mapping":
		[
			"identity",
			"LU OT"
		]
	},
	{
		"name": "RestBackwardBinaryInteger",
		"type": "quantifier",
		"direction": "backward",
		"min": 0,
		"max": 3,
		"automata":
		[
			"UU*B"
		]
	},
	{
		"name": "DecimalInteger",
		"type": "heatherAndTheather",
		"automata":
		[
			"ForwardDecimalInteger",
			"BackwardDecimalInteger"
		]
	}
]
